<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.shop.mapper.ProductMapper">
    
    <resultMap id="ProductResultMap" type="com.shop.entity.Product">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="description" column="description"/>
        <result property="price" column="price"/>
        <result property="stock" column="stock"/>
        <result property="sales" column="sales"/>
        <result property="image" column="image"/>
        <result property="status" column="status"/>
        <result property="categoryId" column="category_id"/>
        <result property="createTime" column="create_time"/>
    </resultMap>

    <select id="findAll" resultMap="ProductResultMap">
        SELECT * FROM products WHERE status = 1 ORDER BY create_time DESC
    </select>

    <select id="findById" parameterType="int" resultMap="ProductResultMap">
        SELECT * FROM products WHERE id = #{id}
    </select>

    <select id="searchByKeyword" parameterType="string" resultMap="ProductResultMap">
        SELECT * FROM products 
        WHERE status = 1 AND (name LIKE CONCAT('%', #{keyword}, '%') OR description LIKE CONCAT('%', #{keyword}, '%'))
        ORDER BY sales DESC, create_time DESC
    </select>

    <select id="searchByKeywordWithSort" resultMap="ProductResultMap">
        SELECT * FROM products 
        WHERE status = 1 AND (name LIKE CONCAT('%', #{keyword}, '%') OR description LIKE CONCAT('%', #{keyword}, '%'))
        <choose>
            <when test="sort == 'price_asc'">
                ORDER BY price ASC
            </when>
            <when test="sort == 'price_desc'">
                ORDER BY price DESC
            </when>
            <when test="sort == 'sales_desc'">
                ORDER BY sales DESC
            </when>
            <when test="sort == 'create_time_desc'">
                ORDER BY create_time DESC
            </when>
            <otherwise>
                ORDER BY sales DESC, create_time DESC
            </otherwise>
        </choose>
    </select>

    <select id="findHotProducts" parameterType="int" resultMap="ProductResultMap">
        SELECT * FROM products WHERE status = 1 ORDER BY sales DESC LIMIT #{limit}
    </select>

    <select id="findLatestProducts" parameterType="int" resultMap="ProductResultMap">
        SELECT * FROM products WHERE status = 1 ORDER BY create_time DESC LIMIT #{limit}
    </select>

    <select id="findByPage" resultMap="ProductResultMap">
        SELECT * FROM products WHERE status = 1 ORDER BY create_time DESC LIMIT #{offset}, #{limit}
    </select>

    <select id="findByPageWithSort" resultMap="ProductResultMap">
        SELECT * FROM products WHERE status = 1 
        <choose>
            <when test="sort == 'price_asc'">
                ORDER BY price ASC
            </when>
            <when test="sort == 'price_desc'">
                ORDER BY price DESC
            </when>
            <when test="sort == 'sales_desc'">
                ORDER BY sales DESC
            </when>
            <when test="sort == 'create_time_desc'">
                ORDER BY create_time DESC
            </when>
            <otherwise>
                ORDER BY create_time DESC
            </otherwise>
        </choose>
        LIMIT #{offset}, #{limit}
    </select>

    <select id="countAll" resultType="int">
        SELECT COUNT(*) FROM products WHERE status = 1
    </select>

    <insert id="insert" parameterType="com.shop.entity.Product" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO products (name, description, price, stock, sales, image, status, category_id, create_time)
        VALUES (#{name}, #{description}, #{price}, #{stock}, #{sales}, #{image}, #{status}, #{categoryId}, #{createTime})
    </insert>

    <update id="update" parameterType="com.shop.entity.Product">
        UPDATE products SET 
            name = #{name},
            description = #{description},
            price = #{price},
            stock = #{stock},
            image = #{image},
            status = #{status},
            category_id = #{categoryId}
        WHERE id = #{id}
    </update>

    <delete id="deleteById" parameterType="int">
        DELETE FROM products WHERE id = #{id}
    </delete>

    <update id="updateStock">
        UPDATE products SET stock = stock - #{quantity} WHERE id = #{id} AND stock >= #{quantity}
    </update>

    <update id="updateSales">
        UPDATE products SET sales = sales + #{quantity} WHERE id = #{id}
    </update>

</mapper>